#include "aes.h"

namespace encdec{


Byte Sbox[256] = {
0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
};

Byte invSbox[256] = {
0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d
};


Byte leftShift(Byte val) {
	Byte h = (Byte) ((signed char) val >> 7);
	return (val << 1) ^ (0x1b & h);
}

void subBytes(Byte state[4][Nb]) {
	for (int j = 0; j < Nb; ++j) {
		for (int i = 0; i < 4; ++i){
			state[i][j] = Sbox[state[i][j]];
		}
	}
}

void shiftRows(Byte state[4][Nb]){
	Byte temp[4][Nb];
	for (int i = 1; i < 4; ++i) {
		for (int j=0; j < Nb; ++j) {
			temp[i][j] = state[i][(i+j)%Nb];
		}
	}
	for (int i = 1; i < 4;++i) {
		for (int j = 0; j < Nb; ++j) state[i][j] = temp[i][j];
	}
}

void mixColumns(Byte state[4][Nb]) {
	Byte a[4];
	Byte b[4];
	for(int j=0;j<Nb;++j){
		for (int i=0;i<4;++i){
			a[i] = state[i][j];
			b[i] = leftShift(state[i][j]);
		}
		state[0][j] = b[0] ^ b[1] ^ a[1] ^ a[2] ^ a[3];
		state[1][j] = a[0] ^ b[1] ^ b[2] ^ a[2] ^ a[3];
		state[2][j] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
		state[3][j] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
	}
}

void addRoundKey(Byte state[4][Nb], Word w[Nb*(Nr+1)], int r) {
	//printf("key: %08x%08x%08x%08x\n", w[Nb*r], w[Nb*r+1], w[Nb*r+2], w[Nb*r+3]);
	for (int j=0;j<Nb; ++j){
		for(int i=0;i<4;++i){
			state[i][j] ^= (Byte) (w[Nb*r+j] >> ((3-i)*8));
		}
	}
}

Word subWord(Word w) {
	return ( (Word) Sbox[(Byte)(w>>24)] << 24 ) | ( (Word) Sbox[(Byte)(w>>16)] << 16) | ((Word) Sbox[(Byte)(w>>8)] << 8) | ( (Word) Sbox[(Byte) w]);
}

Word rotWord(Word w) {
	return ( w << 8 ) | ( w >> 24);
}

void keyExpansion(Byte key[4*Nk], Word w[Nb*(Nr+1)]) {
	for (int i = 0; i < Nk; ++i) {
		w[i] = ((Word) key[4*i] << 24) | ((Word) key[4*i+1] << 16) | ((Word) key[4*i+2] << 8) | ((Word) key[4*i+3]);
	}
	Byte rcon = 1;
	for (int i = Nk; i < Nb*(Nr+1); ++i) {
		Word temp = w[i-1];
		if (i % Nk == 0) {
			temp = subWord(rotWord(temp)) ^ ((Word) rcon << 24);
			rcon = (rcon << 1) ^ (0x1b & -(rcon >> 7));
		} else if (Nk > 6 && (i % Nk == 4)) {
			temp = subWord(temp);
		}
		w[i] = w[i-Nk] ^ temp;
	}
}

// void printState(Byte state[4][Nb]) {
// 	for (int j=0;j<Nb;++j){
// 		for(int i=0;i<4;++i){
// 			printf("%02x",state[i][j]);
// 		}
// 	}
// }

void cipher(Byte in[4*Nb], Byte out[4*Nb], Word w[Nb*(Nr+1)]) {
	Byte state[4][Nb];
	for (int i=0;i<4;++i){
		for (int j=0;j<Nb;++j){
			state[i][j] = in[j*4+i];
		}
	}
	//printf("begin: "); printState(state); printf("\n");
	addRoundKey(state, w, 0);
	for (int r = 1; r < Nr; ++r) {
		//printf("round[%d]\n", r);
		//printf("input: "); printState(state); printf("\n");
		subBytes(state);
		//printf("sbox: "); printState(state); printf("\n");
		shiftRows(state);
		//printf("shift r: "); printState(state); printf("\n");
		mixColumns(state);
		//printf("mix col: "); printState(state); printf("\n");
		addRoundKey(state, w, r);
	}
	subBytes(state);
	shiftRows(state);
	addRoundKey(state, w, Nr);
	//printf("FINAL: "); printState(state); printf("\n");
	for (int i=0;i<4;++i){
		for (int j=0;j<Nb;++j){
			out[j*4+i] = state[i][j];
		}
	}
}

void invShiftRows(Byte state[4][Nb]) {
	Byte temp[4][Nb];
	for (int i = 1; i < 4; ++i) {
		for (int j=0; j < Nb; ++j) {
			temp[i][(i+j)%Nb] = state[i][j];
		}
	}
	for (int i = 1; i < 4;++i) {
		for (int j = 0; j < Nb; ++j) state[i][j] = temp[i][j];
	}
}

void invSubBytes(Byte state[4][Nb]) {
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < Nb; ++j) {
			state[i][j] = invSbox[state[i][j]];
		}
	}
}

/*
0e 14 = 8+4+2
0b 11 = 8+2+1
0d 13 = 8+4+1
09  9 = 8+1
*/
void invMixColumns(Byte state[4][Nb]) {
	Byte p1[4], p2[4], p4[4], p8[4];
	for(int j=0;j<Nb;++j){
		for(int i=0;i<4;++i){
			p1[i] = state[i][j];
			p2[i] = leftShift(p1[i]);
			p4[i] = leftShift(p2[i]);
			p8[i] = leftShift(p4[i]);
		}
		state[0][j] = p8[0] ^ p4[0] ^ p2[0] ^ p8[1] ^ p2[1] ^ p1[1] ^ p8[2] ^ p4[2] ^ p1[2] ^ p8[3] ^ p1[3];
		state[1][j] = p8[0] ^ p1[0] ^ p8[1] ^ p4[1] ^ p2[1] ^ p8[2] ^ p2[2] ^ p1[2] ^ p8[3] ^ p4[3] ^ p1[3];
		state[2][j] = p8[0] ^ p4[0] ^ p1[0] ^ p8[1] ^ p1[1] ^ p8[2] ^ p4[2] ^ p2[2] ^ p8[3] ^ p2[3] ^ p1[3];
		state[3][j] = p8[0] ^ p2[0] ^ p1[0] ^ p8[1] ^ p4[1] ^ p1[1] ^ p8[2] ^ p1[2] ^ p8[3] ^ p4[3] ^ p2[3];
	}
}

void decipher(Byte in[4*Nb], Byte out[4*Nb], Word w[Nb*(Nr+1)]) {
	Byte state[4][Nb];
	for (int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			state[i][j] = in[i+4*j];
		}
	}
	addRoundKey(state, w, Nr);
	//printf("begin: "); printState(state); printf("\n");
	for (int r=Nr-1;r>=1;--r){
		//printf("round[%d]\n", r);
		//printf("inv_input: "); printState(state); printf("\n");
		invShiftRows(state);
		//printf("inv_shift: "); printState(state); printf("\n");
		invSubBytes(state);
		//printf("inv_sub: "); printState(state); printf("\n");
		addRoundKey(state, w, r);
		//printf("inv_add: "); printState(state); printf("\n");
		invMixColumns(state);
		//printf("inv_mix: "); printState(state); printf("\n");
	}

	invShiftRows(state);
	invSubBytes(state);
	addRoundKey(state, w, 0);

	//printf("Finale: "); printState(state); printf("\n");
	for (int i =0;i < 4; ++i) {
		for (int j=0;j<Nb;++j){
			out[i+4*j] = state[i][j];
		}
	}
}


}